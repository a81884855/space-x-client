{"version":3,"sources":["logo.png","serviceWorker.js","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","launch","flight_number","mission_name","launch_date_local","launch_success","className","style","background","console","log","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","marginTop","launches","map","LaunchItem","key","Component","LAUNCH_QUERY","Launch","props","params","parseInt","useEffect","scroll","top","left","behavior","scrollTo","variables","rocket","rocket_id","rocket_name","rocket_type","links","mission_patch","reddit_campaign","article_link","classNames","Image","width","margin","display","src","Button","variant","href","target","client","ApolloClient","uri","App","paddingBottom","logo","alt","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8268996a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7dab9996.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\n\nexport default function ({\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\n}) {\n  return (\n    <div\n      className=\"card card-body mb-3\"\n      style={{\n        background:\n          launch_success === null\n            ? \"cornflowerblue\"\n            : launch_success === \"true\"\n            ? \"#28a745\"\n            : \"#dc3545\",\n      }}\n    >\n      {console.log(launch_success)}\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            <span>Mission:</span> <span>{mission_name}</span>{\" \"}\n          </h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-planing\" /> = Planing\n      </p>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error)\n              return <h2 style={{ marginTop: 40 }}>Can't fetch the data</h2>;\n            return (\n              <>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.mission_name} launch={launch} />\n                ))}\n              </>\n            );\n          }}\n        </Query>\n      </>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\nimport { Image, Button } from \"react-bootstrap\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n      links {\n        mission_patch\n        reddit_campaign\n        article_link\n      }\n    }\n  }\n`;\n\nconst Launch = (props) => {\n  let { flight_number } = props.match.params;\n  flight_number = parseInt(flight_number);\n\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: \"smooth\",\n    });\n    return () => {\n      window.scrollTo(0, 0);\n    };\n  }, []);\n\n  return (\n    <>\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading</h4>;\n          if (error) return <div>Sorry! Can't fetch the data</div>;\n\n          const {\n            mission_name,\n            flight_number,\n            launch_success,\n            launch_date_local,\n            rocket: { rocket_id, rocket_name, rocket_type },\n            links: { mission_patch, reddit_campaign, article_link },\n          } = data.launch;\n\n          return (\n            <div>\n              <Link to=\"/\" className=\"btn btn-secondary\">\n                Back\n              </Link>\n              <h1 className=\"display-4 my-3\">\n                <span\n                  className={classNames({\n                    \"text-planing\": launch_success === null,\n                    \"text-success\": launch_success === true,\n                    \"text-danger\": launch_success === false,\n                  })}\n                >\n                  Mission:\n                </span>\n                {mission_name}\n              </h1>\n              <Image\n                style={{ width: 300, margin: \"0 auto\", display: \"block\" }}\n                src={mission_patch}\n              />\n              <h4 className=\"mb-3\">Launch Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                  Flight Number: {flight_number}\n                </li>\n                <li className=\"list-group-item\">\n                  Launch Date:{\" \"}\n                  <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n                </li>\n                <li className=\"list-group-item\">\n                  Launch Successful:{\" \"}\n                  <span\n                    className={classNames({\n                      \"text-planing\": launch_success === null,\n                      \"text-success\": launch_success === true,\n                      \"text-danger\": launch_success === false,\n                    })}\n                  >\n                    {launch_success === null\n                      ? \"Unknown\"\n                      : launch_success\n                      ? \"Yes\"\n                      : \"No\"}\n                  </span>\n                </li>\n              </ul>\n              <h4 className=\"my-3\">Rocket Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n              </ul>\n              <h4 className=\"my-3\">More Information</h4>\n              <Button\n                className=\"mr-3\"\n                variant=\"success\"\n                href={reddit_campaign}\n                target=\"_blank\"\n              >\n                Reddit Campagin\n              </Button>\n              <Button variant=\"success\" href={article_link} target=\"_blank\">\n                Article link\n              </Button>\n              <hr />\n            </div>\n          );\n        }}\n      </Query>\n    </>\n  );\n};\n\nexport default Launch;\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport logo from \"./logo.png\";\nimport \"./index.css\";\n\nconst client = new ApolloClient({\n  uri: \"https://4zazeyvm38.execute-api.us-east-1.amazonaws.com/prod/graphql\",\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"space-x\">\n            <div className=\"container\" style={{ paddingBottom: 300 }}>\n              <img\n                src={logo}\n                alt=\"SpaceX\"\n                style={{\n                  width: 300,\n                  display: \"block\",\n                  margin: \"auto\",\n                }}\n              />\n              <Route exact path=\"/\" component={Launches} />\n              <Route exact path=\"/launch/:flight_number\" component={Launch} />\n            </div>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}